#!/usr/bin/env node

const fs = require('fs')
const path = require('path')
const program = require('commander')
const { spawn } = require('child_process')
const chalk = require('chalk')

const { printPkgVersion, getPkgVersion, } = require('../utils')

const create = require('../packages/actions/create')
const newpage = require('../packages/actions/newpage')
const gitpush = require('../packages/actions/gitpush')
const run = require('../packages/actions/run')
const npmMirror = require('../packages/actions/npm-mirror')
const server = require('../packages/actions/server')

if (!['init', 'new', 'push', 'run', 'server', 'origin'].includes(process.argv[2])) {
  printPkgVersion()
}


// version
program
  .version(getPkgVersion(), '-v, --version')
  .usage('[command]')

// 生成项目
program
  // .command('create <projectName>')
  .command('init')
  .description('Generate a project by type (taro 、backoffice...)')
  .action(create)

// 开启一个静态服务
program
  .command('server')
  .option('-p, --port', 'set my prot')
  .option('-s, --silent', `don't open browser`)
  .option('-d, --dir', `set run dir. current as default`)
  .option('-l, --log', `print url log`)
  .option('-f, --fallback', `Enable history fallback`)
  .description('run a server')
  .action(server)

// git push
program
  .command('push')
  .description('merge git pull && git commit -m  xxx && git push')
  .action(gitpush)

// 选择可运行的命令
program
  .command('run')
  .description('Lists all runnable commands')
  .action(run)

// 创建模块/页面
program
  .command('new <pagepath>')
  .description('create a module/page template.')
  .action(newpage)


// npm/yarn 镜像管理
program
  .command('origin <command>')
  .description('change npm/yarn mirror, sbc origin ls / sbc origin use')
  .action(npmMirror)


program.parse(process.argv)

































// test

// console.log('you ordered a pizza with:');
// if (program.peppers) console.log('  - peppers');
// console.log(program);

// program
//   .version('1.5.3', '-v, --version')
//   .usage('[command]')

// program
//   .command('init')
//   .description('initialize your project')
//   .action(e => {
//     console.log(1)
//   })

// program
//   .command('new [module]/[module]-[page] <ddd>')
//   .description('hhh')
//   .action(e => {
//     console.log(e)
//   })

// program
//   .command('rm <dir>')
//   .option('-r, --recursive', 'Remove recursively')
//   .action(function (dir, cmd) {
//     console.log('remove ' + dir + (cmd.recursive ? ' recursively' : ''))
//   })


// function range(val) {
//   return val.split('..').map(Number);
// }

// function list(val) {
//   return val.split(',');
// }

// function collect(val, memo) {
//   memo.push(val);
//   return memo;
// }

// function increaseVerbosity(v, total) {
//   return total + 1;
// }

// program
//   .version('0.1.0')
//   .usage('[options] <file ...>')
//   .option('-i, --integer <n>', 'An integer argument', parseInt)
//   .option('-f, --float <n>', 'A float argument', parseFloat)
//   .option('-r, --range <a>..<b>', 'A range', range)
//   .option('-l, --list <items>', 'A list', list)
//   .option('-o, --optional [value]', 'An optional value')
//   .option('-c, --collect [value]', 'A repeatable value', collect, [])
//   .option('-v, --verbose', 'A value that can be increased', increaseVerbosity, 0)
//   .parse(process.argv);

// console.log(' int: %j', program.integer);
// console.log(' float: %j', program.float);
// console.log(' optional: %j', program.optional);
// program.range = program.range || [];
// console.log(' range: %j..%j', program.range[0], program.range[1]);
// console.log(' list: %j', program.list);
// console.log(' collect: %j', program.collect);
// console.log(' verbosity: %j', program.verbose);
// console.log(' args: %j', program.args);


// program
//   .version('0.1.0')
//   .option('-s --size <size>', 'Pizza size', /^(large|medium|small)$/i, 'medium')
//   .option('-d --drink [drink]', 'Drink', /^(coke|pepsi|izze)$/i)
//   .parse(process.argv);

// console.log(' size: %j', program.size);
// console.log(' drink: %j', program.drink);

// program.parse(process.argv)